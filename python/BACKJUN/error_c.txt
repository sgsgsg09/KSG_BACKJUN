n = map(int, stdin.readline())
map객체로 돌려주는 것이다.

my_list = [1, 2, 3]
iterator = iter(my_list)

print(next(iterator))  # 출력: 1
print(next(iterator))  # 출력: 2
print(next(iterator))  # 출력: 3
print(next(iterator, "기본값"))  # 출력: "기본값" (이미 리스트가 끝났으므로 기본값이 반환됨)

next를 써야 한다.
하지만 123이렇게 쓰면 1,2,3 순서대로 나오게 된다. 주의하자.

readline(): 파일에서 한 줄씩 읽어옵니다. 반환값은 문자열입니다. 만약 더 이상 읽을 줄이 없으면 빈 문자열('')을 반환합니다.

readlines(): 파일의 모든 줄을 한 번에 읽어옵니다. 반환값은 각 줄을 요소로 갖는 리스트입니다.

int는 'aaa' 같은 것을 명시적 형변환을 할 수 없다.


ord('a') # a의 유니코드 값을 알 수 있다.


enumerate(s)는 s의 각 요소와 인덱스를 순회하면서 튜플로 반환합니다. 각 튜플은 (인덱스, 요소) 형태로 구성됩니다. 이를 통해 반복문에서 요소와 함께 해당 요소의 인덱스에 접근할 수 있습니다.

for index, fruit in enumerate(my_list):
    print(f'인덱스 {index}의 과일: {fruit}')

dict_alpha = {'a': 1, 'b': 2, 'c': 3}

generator_expression = (str(i) for i in dict_alpha.values())

print(generator_expression) #제너레이터이다.
for value in generator_expression:
    print(value)

    또는 ' '.join(str(i) for i in dict_alpha.values())
    join() 메서드는 문자열을 결합할 때 사용되는 파이썬의 내장 메서드입니다. 특히, 리스트나 튜플과 같은 반복 가능한(iterable) 객체를 문자열로 결합할 때 주로 사용됩니다.

len() 함수는 파이썬 내장 함수 중 하나로, 주어진 시퀀스(리스트, 튜플, 문자열 등)나 컬렉션의 길이(요소의 개수)를 반환합니다.

strip() 메서드는 문자열의 양 끝에서 공백과 개행 문자 등을 제거합니다.

my_string = "Hello\nWorld"
new_string = my_string.replace("\n", "")
print(new_string)

리스트를 딕셔너리로 생성
    my_list = ['apple', 'banana', 'cherry']

    # 모든 요소들을 같은 값으로 갖는 딕셔너리 생성
    my_dict = {item: 'fruit' for item in my_list}


    my_list = ['apple', 'banana', 'cherry']

    # 0부터 시작하는 인덱스를 값으로 갖는 딕셔너리 생성
    my_dict = {item: index for index, item in enumerate(my_list)}

딕셔너리를 정렬하기
    my_dict = {'a': 10, 'b': 5, 'c': 8, 'd': 3}

    # 딕셔너리를 값으로 정렬한 리스트 생성
    sorted_list = sorted(my_dict.items(), key=lambda x: x[1])

        key=lambda x: x[1]는 정렬 함수에 대한 기준을 지정하는 역할을 합니다.

        여기서 lambda는 간단한 익명 함수를 만들 때 사용하는 파이썬의 표현입니다. x는 각 요소를 나타내며, x[1]은 딕셔너리에서 값에 해당합니다.

        따라서, key=lambda x: x[1]는 정렬 기준을 딕셔너리의 값으로 설정한다는 의미입니다. 이것은 sorted() 함수가 각 요소의 값을 기준으로 정렬하게 됨을 의미합니다.

        lambda x: (x[1], x[0])는 먼저 빈도수를 기준으로 오름차순 정렬하고, 그 안에서 단어를 기준으로 정렬합니다.
    # 정렬된 리스트에서 값을 가져와서 작은 값부터 리스트에 넣기
    result_list = [item[1] for item in sorted_list]

    print(result_list)
    args.sort()는 리스트를 정렬하는 메서드입니다. 그러나 이 메서드는 원본 리스트를 직접 변경하며, 반환값은 None입니다.

    따라서 sort_args에는 None이 할당됩니다. 이는 정렬된 리스트가 아닌 원본 리스트를 변경한 것입니다.

    올바른 방법은 다음과 같이 두 단계로 나누어야 합니다:

    Copy code
    args.sort()
    sort_args = args
    또는 한 줄로 작성하려면 다음과 같이 할 수 있습니다:

    Copy code
    sort_args = sorted(args)
    위의 코드는 args를 정렬한 새로운 리스트를 sort_args에 할당합니다. 원본 리스트 args는 변경되지 않습니다.

all
    # 모든 요소가 참인 경우
    list1 = [True, True, True]
    result1 = all(list1)
    print(result1)  # 출력: True

    # 하나라도 거짓인 요소가 있는 경우
    list2 = [True, True, False]
    result2 = all(list2)
    print(result2)  # 출력: False

lis[0:] == 0은 [1, 2, 3] == 0

*리스트는 반복요소에 활용할 수가 없다.
    1. range(len(list))
    2. enumerate(list)
    3. zip
과 같은 방식을 활용해야 한다.

sum_arg = []
for idx,(a,b) in enumerate(zip(rev_arg, rev_args)):
        sum_arg[idx] = a + b
        print(sum_arg)
이미 sum_arg 리스트는 비워져 있다. 이를 접근하는 것은 안되는 일이므로
sum_arg.append(a+b)를 활용하자.